wolee777@aicore.co.kr


#### 1. 조언

이해로 모든 것을 해결 -> 1%만


연습이 중요 

실력-> 스스로 책을 읽고 판단을 할 수 있을 정도

입사 1년차가 고비, 
조금만 하고 판단x -> 꾸준히 하고 버텨보자.

돈을 많이 주는 것은 이유가 있다.

최소 3년차-> 경력직으로 인정.

예습은 아예 안 해도 됌.

복습** > 예습

그날 하루 공부한 것을 습득이 중요.

데이터는 정해진 정답은 없다. 스스로 찾는 과정(역량의 결과)
@최선인지 판단해야함.

@본질 -> 무엇이 중요한지. 기본, 세심함
초심을 유지하는게 중요- 익숙해지면 변함.
첫 날 각오를 매일 인지

스스로 찾아가면서 공부해야함.


git

프로젝트 - 개인, 단체



#### 2. 컴퓨터 구조와 원리


@computer system

1.Hardware

=> Cpu, Memory, I/O Device (Input, Output - 입력,출력)		(cpu, memory는 눈에 보이지 않음.) (cpu, memory, I/O device 있으면 컴퓨터라 말해도 됌.)

2.Software

=> System s/w, Application s/w 

시스템 관점 2가지.
Application s/w (사용자 관점 중심, end user)
하드웨어 관점 (H/W 제어(system)

UI (유저 인터페이스)



컴퓨터 시스템 구조 (그림)

명령 사이클   cpu 1초에 몇 번 하는가 -> cpu 속도



@

컴퓨터는 0,1 인식 -> 전기 있고 끊김에 따른 상태만 인식

메모리(RAM, ROM) -> Main memory, 1차 메모리
보관, 실행이 가능.


*실행할려면 명령,데이터가 있어야 한다.


RAM := 칠판 (단 전원이 연결되어 있을 때만, 만약 차단되면 다 지워짐)
ROM :=책 (전원하고 상관 없이 저장)

USB메모리 -> 롬,램 성격 합쳐진 것.


롬은 램에 비해 속도가 느림. 롬에서 직접 읽지 않고 램으로 읽음(느려서).
그래서 웬만한 사용하는 메모리는 다 램으로 이용.


8칸, 1칸에 1비트(on, off 둘 중 하나)

00000001
8개 모임 -> 8bit = 1byte (컴퓨터에서 최소 표현 단위)

나타낼 수 있는 경우 수 2에 8승 -> 표현 256가지


0,1 로 표현해서 다른 것들,단어들 표현을 약속함 -> code표, ascii code(아스키 코드)-미국표준화코드, 프로토콜(Protocol)-규약


아스키코드는 처음엔 7bit (128가지), 인터넷 통신과 대용성에 숫자 부족해서 늘림-> 8bit

한글은 자음 모음 17112 글자가 필요 -> 비트를 늘려야 함. -> 완성형 한글을 씀, 약 4000자 정도가 제일 많이 씀. 글자 표현이 안되는 것들이 깨지는 이유가 이 4000자 이외의 것이 생겨서.


UNI Code -> 전세계 글자를 2byte 안에 담음. (요즘은 아스키 보단 유니 코드를 씀)

UNI Code 해도 한글이 깨짐?
OS달라서.

운영체제 (Operating System) -> 1.기능: 하드웨어 제어

명령을 '어떻게'를 해주는 것이 OS(운영체제)가 함.
모든 컴퓨터 시스템은 OS 없으면 동작하지 않는다.

OS는 회사마다 다르기 때문에 서로 호완이 안 됌.

UNI-8 (글자를 표현하는 방식임, 한글이 깨지지 않음- 꺠질 확률이 적다.)



#### 메모리 접근 절차(중요!!!)

이 절차는 변하지 않는다.

'''
저장하는 위치 지정하는 방법이 있어야 한다.(식별)

제일 쉬운 방법은 숫자 붙이기(0,1,2,3,4,.....)
0은 0번지, 메모리 주소라고도 한다.
'''

1. 메모리 주소 지정
2. 동작 결정 (메모리에서 할 수 있는 동작은 읽기, 쓰기)
3. 실제 데이터(Data), 코드(Code)를 결정된 동작으로 수행


cpu와 memory 사이 연결된 선 => Bus

@ Bus 종류 3가지

Adress bus 1.
Data bus 3.
control bus 2.


선 1가닥이 1bit

32비트 cpu
64비트 cpu
-> 데이터 bus 사이즈

32비트 cpu 64비트 윈도우?
이론상 가능 64비트를 다 쓰지 못하고 32비트만 씀.

속도는 이론적으로 차이가 별로 없음. 프로그램을 그냥 그 비트에 다 쓸 수 있게 짜야함.
64비트 쓰는 이유는 32비트cpu로는 접근 가능한 메모리가 4기가(4GB)가 한계이다.
메모리를 더 쓰고 싶어서 64비트를 사용함.
64비트는 이론적으로 접근 가능한 메모리는 16테라



보조 메모리, 2차 메모리 => Usb memory, HDD, SDD 
-> 보관만 가능.(소멸x)

그래서 램에 로드해서 대신 씀.
램은 롬에 세이브를 한다.

보조기억장치(보조메모리) 있어야 컴퓨터 실행이 된다.(칩 같은, 렌드 메모리)
랜드메모리 OS 설치되어 있다!!!



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



#### Version Control System

버전 관리 시스템.
종류 2가지

1.중앙 집중식
클라이언트들은 정보를 주고 중앙에서 처리한 것을 띄우기
중앙이 문제 생기면 어떻게 할 수 없다.
중앙 집중식은 요즘 잘 안쓴다.


툴:SVN, CVS



2.분산식

툴: Git-각 클라이언트, GitHub(협업관련)-서버역할

클라이언트가 각자 버전 시스템 운영
클라이언트(VCS운영)

협업을 할려면 연결을 해야함.



----------------------
Server (=Service 제공자)
Client (=Service 요청자)



File : 2차 메모리, 보조메모리에 저장하는 단위(보관 단위)

확장자 : 

윈도우10에서 디폴트는 확장자 숨김


*확장자 보이게 하고, 숨김 파일도 보이는 걸로 하자.



윈도우에서는 확장자 exe, msi, com(이젠 별로 많이 안 씀) 이런 것이 실행 가능한 파일
맥은 확장자가 틀림. 그리고 구분이 안 나와서 집적 클릭해서 확인해야함.




*c:\program Files\Git

c:-> c드라이브, \-> 루트(\program 만 루트) 역슬러쉬 , 2번째 위치 \ -> 밑에

users 밑에 설치하지 말자. 나중에 파이썬 디폴트 설치가 users 이다.

경로를 꼼꼼하게 확인하자. 나중에 혼동되서 안 되는 것이 생김.

users 는 권한이 진짜 까다로움. 사용자가 쓰는 곳이라 그럼.
에디터는 users 에도 상관 없음, 메모장과 같음. 설치 위치는 상관 없음
근데 파이썬은 계발 툴이므로 신경 써야함


설치 과정에서 디폴트 내용중 vim 은 단축키 에디터 (웬만하면 쓰지 말자! 공부해서 외우고 활용할꺼면 이걸 선택)



CLI(Command Line Interface) 명령어 입력 방식, 환경 - 키보드

CLI의 환경을 Cmd가 구성해줌




디폴트 글꼴
Consolas, 'Courier New', monospace


많이 쓰는 글꼴(개발자 도움)


http://github.com/naver/d2codingfont

http://sourcefoundry.org/hack/



스토리 기능이 있기 때문에 예전에 썼던 명령어 다시 적기 가능


d: 
cd

dir \w

디렉토리, 경로 이름.



@@@@@@@@@@@@@@@@@@@@@@

#깃 유틸리티 다운로드 홈피

http://git-scm.com/

검색 => cmd => git --versjon(git버전 확인 명령어)


#깃을 이용한 버전 관리 절차

1.관리할 디렉터리에서 git init (=초기화)

2.버전 관리할 대상 추가  git add [file명]
git status (상태확인)

3. 커밋 수행 git commit -m "설명"
ex) git commit -m "first R Script[first.R]"

http://github.com/


http://desktop.github.com/
이건 설치 프로그램 아니므로 아무데서나 가능.



@@@@@@@@@@@@@@@@@@@@


1차 산업혁명	증기 이용

2차 산업혁명	전기 이용

3차 산업혁명	인터넷 이용

인터넷 1.0 세대 (단순 검색, 검색만, 가능 내용 수정 불가)
인터넷 2.0 세대 (사용자 참여가 가능, 게시판 댓글, 상호작용 가능, 누군가 제공하는 서비스를 이용만 함)
인터넷 3.0 세대 (사용자에 의한 contents 생산 , 예로 인스타그램)

4차 산업혁명 (앞으로 올 것, 현재 19년 기준 나오지 않음) - 진짜 변화할려면 회사, 공장 같은 것이 변화해야 함.

말이 나오게 되는 순서,

- IoT, 모든 사물들을 인터넷에 연결
- Big Data(IoT에서 나오는 양이 엄청 많아져서) - 쌓이는 데이터들을 활용하자, 분석.

 사람이다 보니 분석이 다 다르고 관점이 달라서 오류도 생길 수 있다.

- AI - 머신러닝(ML) 기계에게 자동화 시킴. 학습,  단순 반복은 기계가 오류 없다. (예로 사진 확인)
		학습률이 높아질 수록 오류가 떨어짐.


궁극적으로 기계가 사람에게 제안하기 -> AI 궁극적 목표


- 블록체인	자기 주도, 개인 주도, 탈중앙화 시스템.


=> 결국, 빅데이터가 중요하다. 앞으로 4차 산업혁명 왔을 때 데이터를 원하는 데로 가공하고 찾아내는 능력이 있어야 한다.
이면의(숨겨진) 현상을 파악

데이터 순위는 눈에 보임, 하지만 그 데이터가 가지고 있는 이면을 파악해야 한다.


단순 패턴만 찾는 것은 의미가 없다.(돈이 안 된다.)
왜 그런 패턴이 나오는지, 의미를 찾아내는 것이 빅데이터 배우는 이유.
데이터 사이언스(현장 경험, 프로그래밍, 통계학 지식 골고루 필요)


*주장을 데이터 분석 근거로


@하둡, 테스트 마이닝(워드 클라우드), 오피니언 마이닝, 소셜 네트워크 분석, 군집 분석, 대규모 정형/비정형 데이터
NoSQL, 


@ 강의ppt 26페이지 내용 중요!
생각 패러다임

데이터 가공(=전처리)

@ 32페이지, 데이터 과학자 능력(앞으로 쌓아야 할)




@@@@@@@@@@@@@@@@@@@@@@@@@@@@


# Program Language 유형

compile 방식

Interpreter 방식



Source Code(Source file)		=>		Object Code(Object file)		=>			Excute Code(Excute file)		=>	결과

editor				compiler						Linker



				syntax error					Link error






R ->1. interpreter방식 2.open source

안드로이드는 오픈소스에서 BSD
또다른 안드로이드는 LGPL ->이건 구글 서비스 안 됌.


근우정신 (맘대로 수정, 저장, 배포 가능하자)


성당mode 안드로이드
시장mode 리눅스


