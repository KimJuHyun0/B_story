
#### Program Language

1. 개발 환경
2. 자료형(변수)
3. 연산자
4. 제어문
5. 함수
6. class


2~4 세트, 5~6세트

함수,class => Library -1.제공되는 Library(사용 방법) 2. 사용자 정의 Library(작성) [알고리즘, 자료구조 지식 필요]




프로그램을 잘 짜고 싶으면 알고리즘(일처리 순서), 자료구조를 잘 다뤄야 한다.


알고리즘,
문제를 해결하는 방법은 무수히 많다. 그것들을 표현하는 것이 알고리즘
알고리즘은 훈련이 필요하다.
생각한 것을 표현할 수 있어야 한다.(해당하는 언어,프로그램 문법으로 표현)
계속 짜보고 해봐야 훈련이 된다.


런타임 문제는 알고리즘 문제! 생각을 바꿔야 해서 어렵다.


R 개발 환경은 인터프리터, 그것만 설치하면 개발 환경 구축 쉽다. R studio 는 쉽게 사용하기 용으로.

IDE 통합개발환경 (Integrated Develolpment Environment)


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



자료형이 많이 중요함.★★★★★


자료형은 컴퓨터 구조와 원리를 이해해야 한다. 기반이기 때문에.


모든 내용 프로그램 변수든 다 메모리에 담고 시작한다.




#### 알고리즘(Algorithm) => 메모리 내용을 어떻게 바꿀 것인가(핵심)

1. 유한성 (시작-끝이 있어야 한다.)
2. 0개 이상의 입력 => 메모리(memory)에 기록
3. 1개 이상의 출력(출력 반드시 있어야 한다.-출력 없으면 의미 없다.) => '메모리 내용'을 출력
4. 유효성(효과 있는)
5. 효과성



언어에서 자주 사용하는 명령어만 배우고 나머지는 찾아서 사용하자.(전문가 될 거라면 다 익히는게 좋다.)



#### Data Type (자료형)

Computer System에서 사용하는 Data Type => 원시 자료형(Scalar) [원자, 더이상 쪼개지지 않는 최소 단위]


@원시 자료형
숫자, 문자를 나누는 기준이 무엇인가?
=>숫자일 때, 문자일 때 들어가는 메모리의 모양이 다르다!

*산술연산 가능하면 (숫자), 필요X이면 (문자)

ex) - 는 전화번호가 아니라 편의상 구분하게 해주는 문자

1.숫자:	정수(나눠서 나머지0 이면 다 정수), 실수 

2.문자:	' ' or " "

논리형 (2가지 상황중 결정, True/False)


@ R이 제공하는 자료형은 숫자,문자,논리형





-R에서는 정수,실수 나누지 않음. 그냥 다 숫자.



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



#### git


깃: version 관리 툴(tool)

1. local 영역 version 관리 (git)
2. global 영역 version 관리 (git, 영역계 github)


github 공개형은 무려, 비공개형은 부분적 유료


github 저장소를 Repositories



깃허브에서 파일 올릴 때 한 파일당 최대 25메가
분할압축해서 올리면 된다.



cd 는 chainge directory 약자

.git 파일이 있어야 git으로 관리하고 있음을 나타남.



#### git 버전 관리 tool

1. git 초기화 (디렉토리): git init => 버전관리 정보가 들어감. 지워져도 원본파일에 영향x
2. git add [file 이름] ( "."써도 되지만 필요하지 않는 것까지 전부 등록되서 조심해야함)
3. git commit -m "설명"

git config --global user.email "이메일"
git config --global user.name "아이디이름"


git add 이후
git commit -m "설명"


git log (log는 사용이력, 기록 [ip]) 이력정보확인



*R단축키
Alt + - => ''<-" 생성


*파일을 저장 해야 git이 인식을 함.



*remote는 로컬하고 글로벌 연결시키는 명령어. 보통 로컬은 origin, 이걸 주소에 연결

git remote add origin [git 주소 붙여넣기]


*연결한 곳에 이제 내용 전달 push
git push -u origin master


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


변수: 값을 저장하는 기억 장소, 변경도 가능함.

변수기능
1. 값 쓰기
2. 값 읽기

number <- 10
변수명	치환연산자	값

"<-" 쓰기도 하고 "=" 쓰기도 함.
근데 R 개발자는 화살표를 많이 씀.
둘은 같은 치환 연산자.


*치환연산자 기준으로 왼쪽 (L value), 오른쪽 (R value) ★
값쓰기 할려면 L value
값읽기 할려면 R value



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

<오후 시간>

기억장소 의미 -> 변수

#### 변수 : 값을 저장하는 기억장소

1.속성(Attribute) -> 기억장소 모양
1-1 자료형(Data Type)		ex) 숫자
1-2 기억장소 크기			ex) 4byte			1bit 는 부호bit, 나머지는 절댓값
1-3 값 저장 방식
1-4 값의 범위

2.연산(기능, 동작)		%연산: 기억장소 이용/변경/동작
2-1 읽기 기능			1. R value 2. 출력명령 		★★★★★★★ 읽기/쓰기 구별 중요!!! => 읽기/쓰기는 알고리즘으로 결정!!
2-2 쓰기 기능			1. L value 2. 입력명령
2-3 산술/관계/논리 연산	(관계 예시: 대소비교.)


#### 변수 생성 방법

정적 자료형으로 생성
-> compile형 언어
-> 한 번 정해지면 바뀌지 않는 형태			ex) C, C++, Java

동적 자료형으로 생성
-> Interpreter형 언어(Script) 			ex) R, Python, Js
-> 한 번 정해져도 필요에 의해 바꿔지는 형태


# Program

1.기억 장소 확보
2. 기억 장소 내용을 Algorithm 따라 읽기/쓰기 
3. 결과 도출



@ print (number)
  함수이름   parameter인수


#Escape Character 제어문자, 읽기 기능
-'\n' :줄바꿈
-'\t' : tab 간격


변수 내용 바뀌면 쓰기, 안 바뀌면 읽기


@@@@@@@@@@@@




#연산자(Operator) : 기호 형태

산술(사칙연산)
->결과는 숫자형

관계(대소 비교)
-> 결과는 논리형

논리(또는/그리고)
-> 결과는 논리형


누적형태, 치환 형태를 구별하자.(언제 쓰이는지)


치환 형태는 기존을 버리고 새롭게 바뀜.
누적 형태는 기존 보존한 상태에서 활용하여 변화.


number1 <- number1 + 10  누적형태

number1 <- number2 + 10  치환형태


## 연산 우선 순위
괄호를 한다면 최우선


## 만약 우선 순위 같으면 그것도 구별하여 정할 때
=> 연산 결합 방향 [일반적으론 왼쪽 -> 오른쪽]



@@@@@@@@@@@@@@@@@@@@@


#### 제어구조 : Program 실행 흐름을 제어

- 순차 구조 : 명령어를 차례대로 나열 (명령 흐름은 위에서 아래 방향으로 흐른다)

- 선택 구조 : if ~ else

- 반복 구조 : for, while



Keyword		예약어
Reserved Word 	예약어

User Defined Word 사용자 정의어


다시 코드를 바꿀 때 편리, 보기쉬운


@ R에서는 패키지 존재.

Package : 함수(Function) Library 집합


help( ifelse )
: help 찾아가는 명령어

ex) ifelse {base}
	base 패키지 소속 -> 즉, R 설치하면 기본적으로 주어진 패키지

파라매타(인수)


for( i in 1:10)   		# 1부터 10까지 반복 범위 (시작1, 끝10)


while 문 쓸 때는 반드시 '반복 제어 변수' 설정해야함.



$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


git config --global user.email "이메일"
git config --global user.name "아이디이름"

git status

git add 이후
git commit -m "설명"


마스터 브렌치?



Ctrl + - 해서 정자 나오게 된다면
Alt + =

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
