
#### Program 작성

1. 문제 정의/이해
2. 기억 장소 결정 (변수 결정)
3. Algorithm 결정(일처리 순서) -> 제어 구조 이용




한 줄에 한 기능 하는 것이 좋다.

코드를 작성할 때 직관적으로 이해하기 편하게 작성.


@@문제
1~1000 사이의 3배수와 5배수를 한 줄에 10개씩 출력하고, 마지막에 개수를 출력하는 Script

=> 1~1000[i 변수(제어변수)] 사이의 3배수와 5배수를 한 줄에 10개씩[변수] 출력하고, 마지막에 개수[변수]를 출력하는 Script


#Pseudo Code (What) : 수기로 내용 작성

0. 변수 초기화
1. 1~1000까지 반복
	1.1 3배수인지 판별
	1.2 5배수인지 판별
	1.3 3의 배수 이거나 5의 배수이면 개수를 세고, 그 수를 출력한다.
2. 개수를 출력한다.


#알고리즘화, 프로그래밍



#### R 기본 자료형

1.숫자
2.문자
3.논리
4.NULL : 아무것도 없다.





@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


#
i <- 1
count <- 0
lineCount <- 1
multiple3 <- NULL
multiple5 <- NULL
while ( i <= 1000 ) {
  multiple3 <- i %% 3
  multiple5 <- i %% 5
  if ( multiple3 == 0 | multiple5 == 0 ) {
    count <- count + 1
    cat( i, " " )
    lineCount <- lineCount + 1
    if ( lineCount > 10 ) {
      lineCount <- 1
      print( '\n' )
    }
  }
  i <- i + 1	# 무한 반복 빠져나가기.
}
print( '\n' )
cat( '1~1000사이의 3애 배수와 5의 배수의 개수 : ', count, '\n' )


@@@@@@@@@@@@@@@@@@@@@@@@@@@


break : 반복구조 빠져나오기 (많이 사용은 좋지 않음)





#### 함수(Function)

:단위 기능[하나의 기능]을 수행하는 Code 집합(Block)
:반복적인 기능을 별도로 작성하기 위해서 함수로 작성(자주 사용하는, 똑같은 알고리즘을 구현함/ 중복기능)

*Package: 함수를 포함한 File

@내장 함수(Library 함수) => 기본제공	R에서 제공하는 함수
@사용자 정의 함수
- 제 3자 함수: 필요시 설치해서 사용.
- 사용자 정의 함수: 내가 만드는


##
함수 호출		=>	함수명( 인수list[ 0개 이상 ] )		=>	수행결과(return값)
							return값(함수 동작 이후 되돌려 주는 값)
							결과는 1개만(결과가 없을 수도 있다.)



@사용자 정의 함수

함수명	<=	function( [ 인수 list ] ) {
			함수 내용 code 작성
			return ( 되돌림값[리턴값] )		# return() 꼭 괄호 붙이자.


*function, return 은 keyword 이다.

*디폴트 지정할 때는 인수 오른쪽에서부터 지정할 수 있다.


@@ 함수유형
1. 인수X, return X (인수 있고 리턴 없는 경우)
2. 인수O, return X
3. 인수X, return O
4. 인수O, return O



#### 함수 파일 만들고 불러서 쓰는 방법




@@@@@@@@@@@@@@@@@@@@@@@@@




#### Scalar (원시값) : 하나의 값(숫자, 문자, 논리)

메모리에 저장하기 위해 [변수]를 사용

(ex) a <-10 (10이라는 스칼라를 변수a 에 메모리 저장)


스칼라로만 변수를 만들면 문제가 달라질 때 수정해야 하거나 추가할 내용이 많다.
변수 하나는 값 하나 밖에 가지지 못하므로. 변수명을 다르게 해서 수 많은 변수를 만들어야 여러개 사용 가능.


같은 자료형에 넣으면 처리하기 쉽다. => 벡터형

#### Vector 

1차원 배열, 열의 집합, 동일 자료형 집합
Scalar형 기억장소의 집합
여러 데이터를 하나의 이름으로 접근 가능.

      v 
a ㅁㅁㅁㅁㅁ 
   1 2 3 4 5
(R 에서는 1부터 시작)	

a[2]
vector명    2-> index

인덱스는 숫자이므로 반복형 가능.


@언어
0 base vector  (ex: python...)
1 base vector  (ex: R...)

@class -> 타입

numeric 	: 숫자형
character	: 문자형
logical	: 논리형


Integer - 정수, Floating - 실수



#### Vector : 동일 자료형 기억 장소 집합 (1차원 배열, 열의 집합)

자료형이 다르면 여러개 벡터 만드는데 그러면 쓰기 힘들다.
데이터 타입이 달라도 저장하는 방법 => list


@ List 
- 다른 Data Type 의 자료를 저장하는 구조
- Key(변수): value 형식으로 저장

자료구조-> 벡터, 리스트, 데이터프레임, 등등

변수 결정할 때 자료구조 고려!


@ Fector형 : 범위형 type (범위 지정)

범위 잡으면 범위 이외의 값들은 다 error 뜸
(R은 Fector 알아서 정해줌)


